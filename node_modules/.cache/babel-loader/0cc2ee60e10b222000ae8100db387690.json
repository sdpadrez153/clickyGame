{"ast":null,"code":"import _classCallCheck from \"/Users/user/Desktop/sandbox/clicky/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/user/Desktop/sandbox/clicky/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/user/Desktop/sandbox/clicky/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/user/Desktop/sandbox/clicky/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/user/Desktop/sandbox/clicky/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/user/Desktop/sandbox/clicky/src/App.js\";\nimport React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport cards from \"./cards.json\";\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      cards: cards,\n      // clickedCardIds: [],\n      score: 0,\n      highscore: 0\n    };\n\n    _this.gameOver = function () {\n      // We always use the setState method to update a component's state\n      if (_this.state.score > _this.state.highscore) {\n        _this.setState({\n          highscore: _this.state.score + 1\n        }, function () {\n          console.log(this.state.highscore);\n        }); // going to loop over the cards\n\n\n        _this.state.cards.forEach(function (card) {\n          card.count = 0;\n        }); // alerting when user clicks same card\n\n\n        alert(\"You picked this card already.  Wanna play again?\");\n      }\n\n      ;\n    };\n\n    _this.clickCount = function (id) {\n      _this.state.cards.find(function (o, i) {\n        if (o.id === id) {\n          if (cards[i].count === 0) {\n            cards[i].count = cards[i].count + 1;\n\n            _this.setState({\n              score: _this.state.score + 1\n            }, function () {\n              console.log(this.state.score);\n            });\n\n            _this.state.cards.sort(function () {\n              return Math.random() - 0.5;\n            });\n\n            return true;\n          } else {\n            _this.gameOver();\n          }\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    // Maps over cards and renders a Card component for each card object\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(Header, {\n        score: this.state.score,\n        highscore: this.state.highscore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"Welcome To The Clicky Game!\", React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Click an image to begin...\")), this.state.cards.map(function (card) {\n        return React.createElement(Card, {\n          clickCount: _this2.clickCount,\n          id: card.id // key is required\n          ,\n          key: card.id,\n          image: card.image,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/user/Desktop/sandbox/clicky/src/App.js"],"names":["React","Component","Card","Wrapper","Header","cards","App","state","score","highscore","gameOver","setState","console","log","forEach","card","count","alert","clickCount","id","find","o","i","sort","Math","random","map","image"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAO,WAAP;;IAEMC,G;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNF,MAAAA,KAAK,EAALA,KADM;AAEN;AACAG,MAAAA,KAAK,EAAE,CAHD;AAINC,MAAAA,SAAS,EAAE;AAJL,K;;UAQRC,Q,GAAW,YAAM;AACf;AACA,UAAI,MAAKH,KAAL,CAAWC,KAAX,GAAmB,MAAKD,KAAL,CAAWE,SAAlC,EAA6C;AAC3C,cAAKE,QAAL,CAAc;AAAEF,UAAAA,SAAS,EAAE,MAAKF,KAAL,CAAWC,KAAX,GAAmB;AAAhC,SAAd,EAAmD,YAAY;AAC7DI,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAL,CAAWE,SAAvB;AACD,SAFD,EAD2C,CAI3C;;;AACA,cAAKF,KAAL,CAAWF,KAAX,CAAiBS,OAAjB,CAAyB,UAAAC,IAAI,EAAI;AAC/BA,UAAAA,IAAI,CAACC,KAAL,GAAa,CAAb;AACD,SAFD,EAL2C,CAQ3C;;;AACAC,QAAAA,KAAK,CAAC,kDAAD,CAAL;AACD;;AAAA;AACF,K;;UAGDC,U,GAAa,UAAAC,EAAE,EAAI;AACjB,YAAKZ,KAAL,CAAWF,KAAX,CAAiBe,IAAjB,CAAsB,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC9B,YAAID,CAAC,CAACF,EAAF,KAASA,EAAb,EAAiB;AACf,cAAGd,KAAK,CAACiB,CAAD,CAAL,CAASN,KAAT,KAAmB,CAAtB,EAAwB;AACtBX,YAAAA,KAAK,CAACiB,CAAD,CAAL,CAASN,KAAT,GAAiBX,KAAK,CAACiB,CAAD,CAAL,CAASN,KAAT,GAAiB,CAAlC;;AACA,kBAAKL,QAAL,CAAc;AAACH,cAAAA,KAAK,EAAG,MAAKD,KAAL,CAAWC,KAAX,GAAmB;AAA5B,aAAd,EAA8C,YAAU;AACtDI,cAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAL,CAAWC,KAAvB;AACD,aAFD;;AAGA,kBAAKD,KAAL,CAAWF,KAAX,CAAiBkB,IAAjB,CAAsB;AAAA,qBAAMC,IAAI,CAACC,MAAL,KAAgB,GAAtB;AAAA,aAAtB;;AACA,mBAAO,IAAP;AACD,WAPD,MAOO;AACL,kBAAKf,QAAL;AACD;AACF;AACF,OAbD;AAcD,K;;;;;;;AAED;6BACS;AAAA;;AACP,aACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,KAA1B;AAAiC,QAAA,SAAS,EAAE,KAAKD,KAAL,CAAWE,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAFA,CADF,EAKG,KAAKF,KAAL,CAAWF,KAAX,CAAiBqB,GAAjB,CAAqB,UAAAX,IAAI;AAAA,eACxB,oBAAC,IAAD;AACE,UAAA,UAAU,EAAE,MAAI,CAACG,UADnB;AAEE,UAAA,EAAE,EAAEH,IAAI,CAACI,EAFX,CAGE;AAHF;AAIE,UAAA,GAAG,EAAEJ,IAAI,CAACI,EAJZ;AAKE,UAAA,KAAK,EAAEJ,IAAI,CAACY,KALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADwB;AAAA,OAAzB,CALH,CADF;AAiBD;;;;EA9De1B,S;;AAiElB,eAAeK,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport cards from \"./cards.json\";\nimport \"./App.css\";\n\nclass App extends Component {\n  // Setting this.state.cards to the cards json array\n  state = {\n    cards,\n    // clickedCardIds: [],\n    score: 0,\n    highscore: 0\n  };\n\n\n  gameOver = () => {\n    // We always use the setState method to update a component's state\n    if (this.state.score > this.state.highscore) {\n      this.setState({ highscore: this.state.score + 1 }, function () {\n        console.log(this.state.highscore);\n      });\n      // going to loop over the cards\n      this.state.cards.forEach(card => {\n        card.count = 0;\n      });\n      // alerting when user clicks same card\n      alert(\"You picked this card already.  Wanna play again?\");\n    };\n  };\n\n  // creating the events that will happen when the user clicks on the images\n  clickCount = id => {\n    this.state.cards.find((o, i) => {\n      if (o.id === id) {\n        if(cards[i].count === 0){\n          cards[i].count = cards[i].count + 1;\n          this.setState({score : this.state.score + 1}, function(){\n            console.log(this.state.score);\n          });\n          this.state.cards.sort(() => Math.random() - 0.5)\n          return true; \n        } else {\n          this.gameOver();\n        }\n      }\n    });\n  }\n\n  // Maps over cards and renders a Card component for each card object\n  render() {\n    return (\n      <Wrapper>\n        <Header score={this.state.score} highscore={this.state.highscore}>\n          Welcome To The Clicky Game!\n        <h3>Click an image to begin...</h3>\n        </Header>\n        {this.state.cards.map(card => (\n          <Card\n            clickCount={this.clickCount}\n            id={card.id}\n            // key is required\n            key={card.id}\n            image={card.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  };\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}